//정우는 꿈에서 N개의 서로 다른 문자로 이루어진 문자열을 보았다.
//
//이 문자열을 구성하는 문자는 알파벳의 처음 N   개의 소문자였다.
//
//이 문자열은 이내 N(N+1)/2개의 다른 문자열로 분열되었다.
//
//새로운 문자열들을 보던 정우는 이내 이 문자열들이 원래 문자열이 가질 수 있는 모든 연속한 부분 문자열임을 알 수 있었다.
//
//연속한 부분 문자열이란 원래의 문자열에서 연속하게 나타나는 일부분을 말한다.
//
//정우는 이내 꿈에서 깨어났고, 이 놀라운 체험을 다시 기억해내기 위해 애썼다.
//
//그러나 보통의 꿈이 그렇듯, 꿈속의 기억은 희미해졌고 기억나는 것은
//
//N과 N(N+1)/2개의 부분 문자열을 사전 순으로 정렬했을 때 K번째 문자열이 S라는 것만 기억이 난다.
//
//이 때 처음 나왔던 문자열로 가능한 것의 개수가 몇 개인지 구하는 프로그램을 작성하라.
//
//예를 들어, 처음 나왔던 문자열이 “cab”라고 하자.
//
//이 문자열의 부분 문자열 6개는 “c”, “ca”, “cab”, “a”, ‘ab”, “b”이고,
//
//이를 사전 순으로 정렬하면 “a”, “ab”, “b”, “c”, “ca”, “cab”가 된다.
//
//만약 K=4 이고 S= “c”이면 “cab”는 답으로 고려되어야 하는 문자열이 된다.
//
//
//[입력]
//
//첫 번째 줄에 테스트 케이스의 수 T가 주어진다.
//
//각 테스트 케이스의 첫 번째 줄에는 두 정수 N, K ( 1 ≤ N ≤ 26, 1 ≤ K ≤ N(N+1)/2 )가 공백으로 구분되어 주어진다.
//
//두 번째 줄에는 문자열 S가 주어진다.
//
//이 문자열은 길이 N이하인 문자열이고, 알파벳의 처음 N개의 소문자로만 이루어져 있으며, 같은 문자를 포함하지 않는다.
//
//
//[출력]
//
//각 테스트 케이스마다 ‘#x’(x는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력하고,
//
//처음 꿈에 나온 문자열로 가능한 개수를 출력한다.
//
//이 수는 매우 클 수 있으므로, 1,000,000,007로 나눈 나머지를 출력해야 한다.
package Battle;

import java.io.*;
import java.util.StringTokenizer;

public class Solution_56_3_정우의문자열꿈 {
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new FileReader("Battle/Solution_56_3_정우의문자열꿈.txt"));
//		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
	}
}
